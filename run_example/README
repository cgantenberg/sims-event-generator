# How this works

This directory contains everything needed to simulate heavy ion collisions 
by combining Trento, free-streaming, MUSIC hydrodynamics, iS3D Cooper-Frye and SMASH.

Binary "TRENTO_FS_HYDRO" runs Trento, free-streaming and MUSIC (hydro).
Binary "SAMPLER_AFTERBURNER" runs Cooper-Frye with iS3D and then SMASH
Both binaries are compiled from the JETSCAPE-SIMS code. 
They are run with a Python wrapper (see below)

These binaries rely on external helper files:
- MUSIC (hydro) requires the "EOS" directory, which contains a pre-tabulated equation of state files
- iS3D's implementation of Cooper-Frye needs helper files found in 
  the directories "deltaf_coefficients", "PDG" and "tables"
- SMASH needs helper files from the "smash_input" directory

All the modules require external parameters (such as initial condition parameters, viscosities, ...).
Parameters are read from each module through four different input files: 
jetscape_init.xml, freestream_input, music_input, iS3D_parameters.dat
The input files are generated by the Python script "generate_module_input_files_MAP_Grad.py". 
This makes it possible to ensure consistency of the parameters across the modules
(for example, same grid size in Trento, free-streaming and MUSIC)

The Python script "run-events-MAP-ALICE-osc.py" is a wrapper that:
- runs "TRENTO_FS_HYDRO" and "SAMPLER_AFTERBURNER"
- post-process the output of SMASH and saves observables in a compact format

It may be necessary to set environement variables:
```
# Set environment variables
sims-event-generator-dir="/home/jetscape-user/sims-event-generator/"
export LD_LIBRARY_PATH=${sims-event-generator-dir}/build/src/lib/:${sims-event-generator-dir}/build/lib/:${sims-event-generator-dir}/build/external_packages/gtl/lib/:${sims-event-generator-dir}/build/external_packages/music/src/:${sims-event-generator-dir}/build/external_packages/freestream-milne/src/:${sims-event-generator-dir}/build/external_packages/iS3D/src/cpp/:${sims-event-generator-dir}/external_packages/smash/smash_code/build/src/:$LD_LIBRARY_PATH
```

Example:
python3 run-events-MAP-ALICE-osc.py --nevents 400 --logfile test.log --tmpdir=/tmp/ --tablesdir=./ res.dat
will:
=> run "TRENTO_FS_HYDRO" 400 times assuming the helper directories "EOS", ... are in "--tablesdir=./"
=> save the resulting observable for _each_ event in "res.dat"
=> save the output in "test.log"

The "res.dat" output of the wrapper script "run-events-MAP-ALICE-osc.py" still needs to be
binned into centralities and averaged over events in each centrality bin before comparison with data.
This can be achieved with the scripts found in "process_and_plot/"
